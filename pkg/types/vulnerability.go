package types

import "github.com/uptrace/bun"

const Version int = 3

// Match : Lightweight data structure for jacked's vulnerability matching framework
type Match struct {
	bun.BaseModel `bun:"table:match"`
	ID            int64    `json:"id" bun:"id,pk,autoincrement"`
	CVE           string   `json:"cve,omitempty"`
	Package       string   `json:"package,omitempty"`
	Severity      string   `json:"severity,omitempty"`
	Namespace     string   `json:"namespace,omitempty"` // namespace : source:vendor/product
	Constraints   []string `json:"constraints,omitempty"`
	CPEs          []string `json:"cpes,omitempty"`       // Common Platform Enumeration
	Fix           string   `json:"fix,omitempty"`        // Fix is the version that the package should be updated to
	Qualifiers    []string `json:"qualifiers,omitempty"` // Purl Qualifiers determines the package is qualified for the match analysis based on the source
	Advisories    []string `json:"advisories,omitempty"`
}

// Vulnerability: Vulnerability metadata as a whole
// Data defers from each sources
type Vulnerability struct {
	bun.BaseModel `bun:"table:vulnerability"`
	ID            int64       `json:"id" bun:"id,pk,autoincrement"`
	Namespace     string      `json:"namespace,omitempty"` // namespace : source:vendor/product
	CVE           string      `json:"cve,omitempty"`
	CWE           string      `json:"cwe,omitempty"`
	Severity      string      `json:"severity,omitempty"`
	CVSS          []CVSS      `json:"cvss,omitempty"`
	EPSS          *EPSS       `json:"epss,omitempty"`
	Fixes         []Fix       `json:"fixes,omitempty"`
	Exploit       []Exploit   `json:"poc,omitempty"`
	Description   string      `json:"description,omitempty"`
	References    []Reference `json:"references,omitempty"`
	Properties    []Property  `json:"properties,omitempty"`
}

// Catalog : Metadata for the vulnerability database
type Catalog struct {
	bun.BaseModel   `bun:"table:catalog"`
	ID              int64  `json:"id" bun:"id,pk,autoincrement"`
	Source          string `json:"source,omitempty"`
	SchemaVersion   int    `json:"schema,omitempty"`
	Matches         int    `json:"matches,omitempty"`
	Vulnerabilities int    `json:"vulnerabilities,omitempty"`
	UniqueCVECount  int    `json:"unique_cve_count,omitempty"`
	GeneratedAt     string `json:"generated_at,omitempty"`
}

type Reference struct {
	Source string `json:"source"`
	URL    string `json:"url"`
}

// CVSS : Common Vulnerability Scoring System
type CVSS struct {
	Source              string  `json:"source"`
	Method              string  `json:"method"`
	Severity            string  `json:"severity"`
	Score               float64 `json:"score"`
	Vector              string  `json:"vector"`
	ExploitabilityScore float64 `json:"exploitability_score"`
}

// Exploit : Proof of Concept (PoC) data or Exploit data
type Exploit struct {
	Source      string `json:"source"`
	URL         string `json:"url"`
	Description string `json:"description"`
}

// EPSS : Exploitability Prediction Scoring System
type EPSS struct {
	URL        string `json:"url,omitempty"`
	Score      string `json:"score,omitempty"`
	Percentile string `json:"percentile,omitempty"`
	Date       string `json:"date,omitempty"`
}

// Fix : Available Remediation Data
type Fix struct {
	Source string `json:"source"`
	Value  string `json:"value"`
}

// Property : Additional metadata
type Property struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}
